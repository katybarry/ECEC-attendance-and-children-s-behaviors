builder <- DSI::newDSLoginBuilder()
builder$append(server = "ninfea", 
               url = "https://www.lifecycle.unito.it", 
               user = "", 
               password = "",
               driver = "OpalDriver")

# create loginframe
test <- builder$build()
conns <- datashield.login(logins = test, assign = TRUE)

datashield.tables(conns)

datashield.assign.table(
  conns =   conns,
  table = "lc_ninfea_outcome_1_0.p11_barry_yearly_rep",
  symbol = "ninfea_outcome")
#core variables
datashield.assign.table(
  conns =   conns,
  table = "lc_ninfea_core_2_1.p11_barry_yearly_rep",
  symbol = "ninfea_core")
#non-response variables
datashield.assign.table(
  conns =   conns,
  table = "lc_ninfea_core_2_1.p11_barry",
  symbol = "ninfea_norep")

# check the columns in the non repeated data
ds.colnames("ninfea_outcome", datasources = conns)
# check columns of non repeated data
ds.colnames("ninfea_core", datasources = conns)
# check the columns in the yearly repeated data
ds.colnames("ninfea_norep", datasources = conns)


#reshaping data into wide format
ds.reShape(
  data.name = "ninfea_core",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c( "childcarecentre_", "childcarerel_", "childcare_",       
               "edu_f1_", "edu_m_", "famsize_child",  "occup_m_", "occup_f1_"),
  direction = "wide",
  newobj = "ninfea_core_wide",
  datasources = conns
)

# verifying reshape worked
ds.colnames('ninfea_core_wide')

# show the reshaped columns of the new data frame
ds.colnames("ninfea_outcome", datasources = conns)

ds.merge(
  x.name = "ninfea_outcome",
  y.name = "ninfea_core_wide",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "df_ninfea",
  datasources = conns
)

# merge the dataset with the nonrepeated variables
ds.merge(
  x.name =  "df_ninfea",
  y.name = "ninfea_norep",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "df_final",
  datasources = conns
)

## ---- check the merged variables
ds.colnames("df_final", datasources = conns)
datashield.workspace_save(conns = conns, ws = "katharine_barry_ninfea_built")


# creating exposure variable
###### childcare center variable will be coded into a dichotomise variable in which if a child
###### was enrolled in child care at year 0  to up to year 3 
ds.table('df_final$childcarecentre_.0')
ds.table('df_final$childcarecentre_.1')


#childcare center years 0 and years 1
ds.asNumeric('df_final$childcarecentre_.0', newobj='centre_0')
ds.asNumeric('df_final$childcarecentre_.1', newobj='centre_1')
ds.replaceNA(x='centre_0', forNA =100, newobj="NAcentre_.0")
ds.replaceNA(x='centre_1', forNA =100, newobj="NAcentre_.1")
ds.make(toAssign='NAcentre_.0 + NAcentre_.1', newobj = 'childcentre')
ds.table ('childcentre', datasources=conns) 
ds.recodeValues(var.name='childcentre', values2replace.vector = c(2, 100,101,200),
                new.values.vector = c(1,0,1,NA), newobj='centre_care')
#if they were in childcare at least once in year 0 and year 1
ds.table('centre_care')

################################################
##covariate variable creation####################
################################################# 


#categorize mother occupation into employed, unemployed, and other (year 0)
ds.table("df_final$occup_m_.0")
ds.asNumeric("df_final$occup_m_.0", newobj='occ_num_m_0')
ds.table('occ_num_m_0')
ds.recodeValues(var.name='occ_num_m_0', values2replace.vector = c(1,3,4,5,6), new.values.vector = c(1,0,2,2,2),newobj="emp_cat_mom_0")
ds.table('emp_cat_mom_0') # 0=unemployed 1=employed 2=other
## convert to a factor variable
ds.asFactor('emp_cat_mom_0',newobj='femp_cat_mom_0')
ds.table('femp_cat_mom_0')

#father's employment status 

ds.table("df_final$occup_f1_.0")
ds.asNumeric("df_final$occup_f1_.0", newobj='occ_num_f_0')
ds.table('occ_num_f_0')
ds.recodeValues(var.name='occ_num_f_0', values2replace.vector = c(1,3,4,6), new.values.vector = c(1,0,2,2),newobj="emp_cat_dad_0")
ds.table('emp_cat_dad_0') # 0=unemployed 1=employed 2=other
## convert to a factor variable
ds.asFactor('emp_cat_dad_0',newobj='femp_cat_dad_0')
ds.table('femp_cat_dad_0')


#sibling position dichotomized into only child variable (wanting for inma to add this variable)
ds.asNumeric("df_final$sibling_pos", newobj = "num_sib")
ds.Boole(V1="num_sib", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="only_child")
ds.table('only_child') 
ds.table("df_final$sibling_pos") 



ds.dataFrame(x=c('only_child', 'df_final','femp_cat_mom_0', 'emp_cat_mom_0', 'femp_cat_dad_0', 'centre_care'), newobj='final')

datashield.workspace_save(conns = conns, ws = "interactions")

###   everyone that replied to child daycare center #####
ds.table("final$centre_care")
ds.dataFrameSubset(
  df.name = "final",
  newobj = "exposure_com",
  V1.name = "final$centre_care",
  V2.name = "0",
  Boolean.operator = ">=", keep.NAs = FALSE, datasources = conns
)




#complete case analysis


ds.dataFrame(x=c('exposure_com$birth_weight','exposure_com$int_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$int_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$femp_cat_mom_0','exposure_com$only_child', 'exposure_com$sex','exposure_com$edu_m_.0'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataint", datasources=conns)

ds.summary('dataint')

#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataint",
  newobj = "dataint",
  V1.name = "dataint$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataint')



ds.dataFrame(x=c('exposure_com$birth_weight','exposure_com$ext_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$ext_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$femp_cat_mom_0','exposure_com$only_child', 'exposure_com$sex','exposure_com$edu_m_.0'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataext", datasources=conns)
ds.table('dataext$centre_care')

#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataext",
  newobj = "dataext",
  V1.name = "dataext$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataext') 
datashield.workspace_save(conns = conns, ws = "lineardata")


############ last bit of clean up to have cohesion across cohorts

### set all variables to appropriate class in internalizing behavior 
ds.asFactor('dataint$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataint$int_age_', newobj='n.int_age_')
ds.asNumeric('dataint$age_years', newobj='n.age_years')
ds.asNumeric('dataint$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataint$int_pc_', newobj='n.int_pc_')
ds.asNumeric('dataint$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataint$child_id', newobj='n.child_id')
ds.asFactor('dataint$only_child', newobj.name='f.only_child')
ds.asFactor('dataint$sex', newobj.name='f.sex')
ds.asFactor('dataint$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataint$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')


ds.dataFrame(x=c('dataint', 'n.birth_weight', 'f.femp_cat_mom_0','f.centre_care','n.age_years', 'n.int_age_','n.int_pc_', 'n.agebirth_m_y', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataint')

### set all variables to appropriate class in externalizing behavior
ds.asFactor('dataext$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataext$ext_age_', newobj='n.ext_age_')
ds.asNumeric('dataext$age_years', newobj='n.age_years')
ds.asNumeric('dataext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataext$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('dataext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataext$child_id', newobj='n.child_id')
ds.asFactor('dataext$only_child', newobj.name='f.only_child')
ds.asFactor('dataext$sex', newobj.name='f.sex')
ds.asFactor('dataext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataext$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')


ds.dataFrame(x=c('dataext','n.birth_weight', 'f.femp_cat_mom_0','f.centre_care','n.age_years', 'n.ext_age_','n.ext_pc_', 'n.agebirth_m_y',  'n.child_id',  'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataext')

ds.colnames('dataint')
ds.colnames('dataext')

datashield.workspace_save(conns = conns, ws = "ldata")




