# Project: Childcare attendance and children's internalizing and externalizing behavior
# Script purpose: DNBC cohort data management 
#Author: Katharine Barry 
# Email: Katharine.Barry@inserm.fr

#################
################# transforming data into wide format ###########################

#logging in and accessing DNBC data:

datashield.tables(conns)

############## assign tables ###########################
####### non repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "p2021lc05kbarry/2_2_core_1_1/non_rep",
  symbol = "dnbc_core_nonrep")
####### repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "p2021lc05kbarry/2_2_core_1_1/yearly_rep"  ,
  symbol = "dnbc_core_repeat")
####### outcome variables ########################
datashield.assign.table(
  conns =   conns,
  table = "p2021lc05kbarry/1_6_outcome_1_0/yearly_rep",
  symbol = "dnbc_outcome")

####### verify the tables have been assigned properly ###############

# columns in the non repeated core data
ds.colnames("dnbc_core_nonrep", datasources = conns)
# check columns of repeated core data
ds.colnames("dnbc_core_repeat", datasources = conns)
# check the columns in the outcome data
ds.colnames("dnbc_outcome", datasources = conns)
ds.dim("dnbc_core_nonrep")
ds.dim("dnbc_core_repeat")
ds.dim("dnbc_outcome")

##### put data into the wide format ###############

ds.reShape(
  data.name = "dnbc_core_repeat",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c(  "childcarecentre_", "childcarerel_","edu_f1_",        
                "occup_m_","famsize_child", "famsize_adult","childcare_","childcareprof_","fam_splitup", "edu_m_"),
  direction = "wide",
  newobj = "dnbc_core_w",
  datasources = conns
)

#verifying columns
ds.colnames("dnbc_core_w", datasources=conns)
ds.dim("dnbc_core_w", datasources=conns)

##### reshape the outcome variable into wide format ####### 


#merge outcome variables with the nonrepeated variables
ds.merge(
  x.name = "dnbc_outcome",
  y.name = "dnbc_core_nonrep",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "analysis_df",
  datasources = conns
)

ds.colnames("analysis_df", datasources=conns)

###### merge all datasets together
ds.merge(
  x.name =  "analysis_df",
  y.name = "dnbc_core_w",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "df_final",
  datasources = conns
)

## ---- check the merged variables
ds.colnames("df_final", datasources = conns)

### who evaluated outcomes

ds.table('df_final$int_eval_', datasources=conns)
ds.table('df_final$ext_eval_', datasources=conns)
####save workspace to access later
datashield.workspace_save(conns = conns, ws = "katharine_barry_dnbc_built")

### who evaluated outcomes
ds.table('df_final$int_eval_', datasources=conns)
ds.table('df_final$ext_eval_', datasources=conns)
############################################################################
############################################################################

############# re-coding exposure variables, outcome variables, and potential covariates #############
#############                                                                           #############

###### childcare center variable will be coded into a dichotomise variable in which if a child
###### was enrolled in child care at year 0 and/or year 1, they will be yes and if not, no ######

#childcare center years 0 and years 1
ds.asNumeric('df_final$childcarecentre_.0', newobj='centre_0')
ds.asNumeric('df_final$childcarecentre_.1', newobj='centre_1')
ds.replaceNA(x='centre_0', forNA =100, newobj="NAcentre_.0")
ds.replaceNA(x='centre_1', forNA =100, newobj="NAcentre_.1")
ds.make(toAssign='NAcentre_.0 + NAcentre_.1', newobj = 'childcentre')
ds.table ('childcentre', datasources=conns) 
ds.recodeValues(var.name='childcentre', values2replace.vector = c(2, 100,101,200),
                new.values.vector = c(1,0,1,NA), newobj='centre_care')
#if they were in childcare at least once in year 0 and year 1
ds.table('centre_care')

ds.asNumeric('df_final$childcarerel_.0', newobj='rel_0')
ds.asNumeric('df_final$childcarerel_.1', newobj='rel_1')


#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='rel_0', forNA =100, newobj="NArel_.0")
ds.replaceNA(x='rel_1', forNA =100, newobj="NArel_.1")

ds.make(toAssign='NArel_.0 + NArel_.1', newobj = 'relcare')
ds.table ('relcare', datasources=conns) 

ds.recodeValues(var.name='relcare', values2replace.vector = c(200,2,10,101,100),
                new.values.vector = c(9999,1,0,1,0), newobj='rel_care')
ds.table('rel_care')



ds.asNumeric('df_final$childcareprof_.0', newobj='prof_0')
ds.asNumeric('df_final$childcareprof_.1', newobj='prof_1')


#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='prof_0', forNA =100, newobj="NAprof_.0")
ds.replaceNA(x='prof_1', forNA =100, newobj="NAprof_.1")

ds.make(toAssign='NAprof_.0 + NAprof_.1', newobj = 'profcare')
ds.table ('profcare', datasources=conns) 
ds.recodeValues(var.name='profcare', values2replace.vector = c(200,2,100,101),
                new.values.vector = c(9999,1,0,1), newobj='prof_care')
ds.table('prof_care')

ds.asNumeric('df_final$childcare_.0', newobj='other_0')
ds.asNumeric('df_final$childcare_.1', newobj='other_1')

ds.colnames('df_final')
#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='other_0', forNA =100, newobj="NAother_.0")
ds.replaceNA(x='other_1', forNA =100, newobj="NAother_.1")

ds.make(toAssign='NAother_.0 + NAother_.1', newobj = 'othercare')
ds.table ('othercare', datasources=conns) 
ds.recodeValues(var.name='othercare', values2replace.vector = c(200,2,100,101),
                new.values.vector = c(9999,1,0,1), newobj='other_care')

ds.table('other_care')

# ECEC care
ds.recodeValues(var.name='centre_care', 
                values2replace.vector = c(0,1),
                new.values.vector = c(1000,2000), missing=9999, newobj='centre_care_T')
ds.table('centre_care_T')

ds.make(toAssign='centre_care_T+rel_care+prof_care+other_care', newobj = 'types_care')
ds.table("types_care")



ds.recodeValues(var.name='types_care', values2replace.vector = c(1000,1001,1002,1003),
                new.values.vector = c(0,2,2,2), newobj='types_care1')
ds.table("types_care1")

ds.recodeValues(var.name='types_care1', values2replace.vector = c(2001,2002,2003),
                new.values.vector = c(1,1,1), newobj='types_care2')

ds.table('types_care2')

ds.recodeValues(var.name='types_care2', values2replace.vector = c(39996),
                new.values.vector = c(NA), newobj='type_care')

ds.table('type_care')

ds.dataFrame(x=c('df_final','type_care', 'centre_care'), stringsAsFactors=FALSE, newobj='df_final')



datashield.workspace_save(conns = conns, ws = "exposure")

################## recoding of covariates #################################
##################                        #################################
#re code only child versus other
ds.asNumeric("df_final$sibling_pos", newobj = "num_sib")
ds.Boole(V1="num_sib", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="only_child")
ds.table('only_child') 
ds.table("df_final$sibling_pos")


#categorize mother occupation into employed, unemployed, and other
ds.asNumeric("df_final$occup_m_.0", newobj='occ_num_m_0')
ds.table('occ_num_m_0')
ds.recodeValues(var.name='occ_num_m_0', values2replace.vector = c(1,2,3,4,5,6), new.values.vector = c(1,1,0,2,2,2),newobj="emp_cat_mom_0")
ds.table('emp_cat_mom_0') # 0=unemployed 1=employed 2=other
## convert to a factor variable
ds.asFactor('emp_cat_mom_0',newobj='femp_cat_mom_0')
ds.table('femp_cat_mom_0')
ds.table('df_final$sibling_pos')

# convert ppd to factor
ds.asFactor('df_final$ppd', newobj.name='f.ppd')

# confirm child gestational weight in numeric
ds.asNumeric('df_final$ga_lmp', newobj='n.ga_lmp')

ds.dataFrame(x=c('df_final','n.ga_lmp','f.ppd',"femp_cat_mom_0", "emp_cat_mom_0",  'only_child', 'centre_care'), newobj='final')
ds.summary('final')

datashield.workspace_save(conns = conns, ws = "covariates")







