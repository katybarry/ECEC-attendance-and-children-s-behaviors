# Project: Childcare attendance and children's internalizing and externalizing behavior
# Script purpose: DNBC cohort data management 
#Author: Katharine Barry 
# Email: Katharine.Barry@inserm.fr

#################
################# transforming data into wide format ###########################

#logging in and accessing DNBC data:

builder <- DSI::newDSLoginBuilder()
builder$append(server = "dnbc",
               url = "",
               user ="",
               password= "",
               driver = "OpalDriver" )

# create loginframe
logindata <- builder$build()

# login into server
conns <- datashield.login(logins = logindata, assign = TRUE)
#view the three tables available in DNBC data
datashield.tables(conns)

############## assign tables ###########################
####### non repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "lc_dnbc_core_2_2.2_2_core_non_rep_kbarry_2021-lc05",
  symbol = "dnbc_core_nonrep")
####### repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "lc_dnbc_core_2_2.2_2_core_yearly_rep_kbarry_2021-lc05"  ,
  symbol = "dnbc_core_repeat")
####### outcome variables ########################
datashield.assign.table(
  conns =   conns,
  table = "lc_dnbc_outcome_1_2.1_2_outcome_yearly_rep_kbarry_2021-lc05",
  symbol = "dnbc_outcome")

####### verify the tables have been assigned properly ###############

# columns in the non repeated core data
ds.colnames("dnbc_core_nonrep", datasources = conns)
# check columns of repeated core data
ds.colnames("dnbc_core_repeat", datasources = conns)
# check the columns in the outcome data
ds.colnames("dnbc_outcome", datasources = conns)
ds.dim("dnbc_core_nonrep")
ds.dim("dnbc_core_repeat")
ds.dim("dnbc_outcome")

##### put data into the wide format ###############

ds.reShape(
  data.name = "dnbc_core_repeat",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c(  "childcarecentre_", "childcarerel_","edu_f1_",        
                "occup_m_","famsize_child", "famsize_adult","childcare_","childcareprof_","fam_splitup", "edu_m_"),
  direction = "wide",
  newobj = "dnbc_core_w",
  datasources = conns
)

#verifying columns
ds.colnames("dnbc_core_w", datasources=conns)
ds.dim("dnbc_core_w", datasources=conns)

##### reshape the outcome variable into wide format ####### 


#merge outcome variables with the nonrepeated variables
ds.merge(
  x.name = "dnbc_outcome",
  y.name = "dnbc_core_nonrep",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "analysis_df",
  datasources = conns
)

ds.colnames("analysis_df", datasources=conns)

###### merge all datasets together
ds.merge(
  x.name =  "analysis_df",
  y.name = "dnbc_core_w",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "df_final",
  datasources = conns
)

## ---- check the merged variables
ds.colnames("df_final", datasources = conns)

### who evaluated outcomes

ds.table('df_final$int_eval_', datasources=conns)
ds.table('df_final$ext_eval_', datasources=conns)
####save workspace to access later
datashield.workspace_save(conns = conns, ws = "katharine_barry_dnbc_built")
conns <- datashield.login(logins = logindata, restore='katharine_barry_dnbc_built')
### who evaluated outcomes
ds.table('df_final$int_eval_', datasources=conns)
ds.table('df_final$ext_eval_', datasources=conns)
############################################################################
############################################################################

############# re-coding exposure variables, outcome variables, and potential covariates #############
#############                                                                           #############

###### childcare center variable will be coded into a dichotomise variable in which if a child
###### was enrolled in child care at year 0 and/or year 1, they will be yes and if not, no ######

#childcare center years 0 and years 1
ds.asNumeric('df_final$childcarecentre_.0', newobj='centre_0')
ds.asNumeric('df_final$childcarecentre_.1', newobj='centre_1')
ds.replaceNA(x='centre_0', forNA =100, newobj="NAcentre_.0")
ds.replaceNA(x='centre_1', forNA =100, newobj="NAcentre_.1")
ds.make(toAssign='NAcentre_.0 + NAcentre_.1', newobj = 'childcentre')
ds.table ('childcentre', datasources=conns) 
ds.recodeValues(var.name='childcentre', values2replace.vector = c(2, 100,101,200),
                new.values.vector = c(1,0,1,NA), newobj='centre_care')
#if they were in childcare at least once in year 0 and year 1
ds.table('centre_care')

ds.recodeValues(var.name='childcentre',
                values2replace.vector = c(100,101,200),
                new.values.vector = c(0,1,NA), newobj='cen_dur')

ds.table('cen_dur')

ds.asNumeric('cen_dur', newobj='dur_num')
ds.recodeValues(var.name='dur_num',
                values2replace.vector = c(0,1,2,3,4),
                new.values.vector = c(0,1,1,2,2), newobj='cen_dur_cat')
ds.asFactor('cen_dur_cat', newobj.name='f.cen_dur_cat')

ds.table('cen_dur')
ds.table('centre_care')
ds.table('f.cen_dur_cat')


################## recoding of covariates #################################
##################                        #################################
#re code only child versus other
ds.asNumeric("df_final$sibling_pos", newobj = "num_sib")
ds.Boole(V1="num_sib", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="only_child")
ds.table('only_child') 
ds.table("df_final$sibling_pos")


#categorize mother occupation into employed, unemployed, and other
ds.asNumeric("df_final$occup_m_.0", newobj='occ_num_m_0')
ds.table('occ_num_m_0')
ds.recodeValues(var.name='occ_num_m_0', values2replace.vector = c(1,2,3,4,5,6), new.values.vector = c(1,1,0,2,2,2),newobj="emp_cat_mom_0")
ds.table('emp_cat_mom_0') # 0=unemployed 1=employed 2=other
## convert to a factor variable
ds.asFactor('emp_cat_mom_0',newobj='femp_cat_mom_0')
ds.table('femp_cat_mom_0')
ds.table('df_final$sibling_pos')
ds.dataFrame(x=c('df_final',"femp_cat_mom_0", "emp_cat_mom_0",  'only_child', 'centre_care','f.cen_dur_cat','cen_dur'), newobj='final')
ds.summary('final')
datashield.workspace_save(conns = conns, ws = "interactions")
datashield.workspace_save(conns = conns, ws = "DNBC_covariates")

#conns <- datashield.login(logins = logindata, restore="DNBC_covariates")
#ds.colnames('final')




###scales used for outcome variables
ds.table('final$int_instr_.7') # SDQ
ds.table('final$ext_instr_.7')# SDQ

#subset data for those who replied to childcare center  

ds.dataFrameSubset(
  df.name = "final",
  newobj = "exposure_com",
  V1.name = "final$centre_care",
  V2.name = "0",
  Boolean.operator = ">=", keep.NAs = FALSE, datasources = conns
)
ds.summary('exposure_com')
ds.table('exposure_com$centre_care')
ds.mean('exposure_com$famsize_adult.0')
ds.table('exposure_com$edu_m_.0')


#complete case analysis


ds.dataFrame(x=c('exposure_com$cen_dur', 'exposure_com$f.cen_dur_cat','exposure_com$fam_splitup.0','exposure_com$birth_weight','exposure_com$int_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$int_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$femp_cat_mom_0','exposure_com$only_child', 'exposure_com$sex','exposure_com$edu_m_.0'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataint", datasources=conns)


ds.summary('dataint')

#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataint",
  newobj = "dataint",
  V1.name = "dataint$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataint')



ds.dataFrame(x=c('exposure_com$cen_dur', 'exposure_com$f.cen_dur_cat','exposure_com$fam_splitup.0','exposure_com$birth_weight','exposure_com$ext_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$ext_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$femp_cat_mom_0','exposure_com$only_child', 'exposure_com$sex','exposure_com$edu_m_.0'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataext", datasources=conns)

ds.summary('dataext')
#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataext",
  newobj = "dataext",
  V1.name = "dataext$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataext') 
datashield.workspace_save(conns = conns, ws = "lineardata")

### placing dataset in the wide format in order to perform descriptive statistics
## due to missingness in father characteristics, we focus primarily on mother's characteristics and family characteristics 

conns <- datashield.login(logins = logindata, restore='lineardata')

ds.dim('dataint')
ds.colnames('dataint')

ds.reShape(
  data.name = 'dataint',
  v.names = c('int_age_', 'int_pc_'),
  timevar.name = "age_years",
  idvar.name = "child_id",
  direction = 'wide',
  newobj = "intdescriptive",
  datasources = conns
)

# verifying dimensions
ds.dim('intdescriptive')
ds.colnames('intdescriptive')



ds.reShape(
  data.name = 'dataext',
  v.names = c('ext_age_', 'ext_pc_'),
  timevar.name = "age_years",
  idvar.name = "child_id",
  direction = 'wide',
  newobj = "extdescriptive",
  datasources = conns
)


ds.dim('extdescriptive')
ds.colnames('extdescriptive')

datashield.workspace_save(conns = conns, ws = "lineardata")

############ last bit of clean up to have cohesion across cohorts

### set all variables to appropriate class in internalizing behavior 
ds.asFactor('dataint$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataint$int_age_', newobj='n.int_age_')
ds.asNumeric('dataint$age_years', newobj='n.age_years')
ds.asNumeric('dataint$int_pc_', newobj='n.int_pc_')
ds.asNumeric('dataint$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataint$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataint$child_id', newobj='n.child_id')
ds.asFactor('dataint$only_child', newobj.name='f.only_child')
ds.asFactor('dataint$sex', newobj.name='f.sex')
ds.asFactor('dataint$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataint$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')
ds.asFactor('dataint$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asNumeric('dataint$cen_dur', newobj='n.cen_dur')

ds.dataFrame(x=c('dataint', 'n.cen_dur','f.fam_splitup.0', 'f.femp_cat_mom_0','f.centre_care','n.age_years', 'n.int_age_','n.int_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataint')

### set all variables to appropriate class in externalizing behavior
ds.asFactor('dataext$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataext$ext_age_', newobj='n.ext_age_')
ds.asNumeric('dataext$age_years', newobj='n.age_years')
ds.asNumeric('dataext$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('dataext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataext$child_id', newobj='n.child_id')
ds.asFactor('dataext$only_child', newobj.name='f.only_child')
ds.asFactor('dataext$sex', newobj.name='f.sex')
ds.asFactor('dataext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataext$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')
ds.asFactor('dataext$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asNumeric('dataext$cen_dur', newobj='n.cen_dur')


ds.dataFrame(x=c('dataext','n.cen_dur', 'f.fam_splitup.0','f.femp_cat_mom_0','f.centre_care','n.age_years', 'n.ext_age_','n.ext_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id',  'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataext')

ds.colnames('dataint')
ds.colnames('dataext')
ds.dim('dataint')
ds.dim('dataext')
datashield.workspace_save(conns = conns, ws = "ldata")



