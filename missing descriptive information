
################################################################################
## Project: ECEC attendance and internalizing and externalizing behaviors in adolescence
## Script purpose: missing data comparisions 
## Date: 30/03/2023
## Author: Katharine M Barry
## Email: katharine.barry@iplesp.upmc.fr
################################################################################   


c.data <- DSI::datashield.login(logins = logindata, restore="all_pop_defined")


## included population for internalizing behavior population
ds.dim('analysis_df_w_int')
ds.colnames('analysis_df_w_int')
## excluded population for internalizing behavior population
ds.dim('excluded_df_w_int')
ds.colnames('excluded_df_w_int')


ds.rep(1, times=7229, newobj = 'included', datasources=c.data[c('alspac')])
ds.rep(1, times=2838, newobj = 'included', datasources=c.data[c('generationR')])
ds.rep(1, times=51004, newobj = 'included', datasources=c.data[c('dnbc')])
ds.rep(1, times=1191, newobj = 'included', datasources=c.data[c('eden')])
ds.rep(1, times=10837, newobj = 'included', datasources=c.data[c('elfe')])
ds.rep(1, times=1238, newobj = 'included', datasources=c.data[c('INMA')])
ds.rep(1, times=294, newobj = 'included', datasources=c.data[c('ninfea')])
ds.dim('analysis_df_w_int', datasources=c.data[c('ninfea')])


### maing sure factors are factors and numerics are numerics
### set all variables to appropriate class in internalizing behavior 
ds.asFactor('analysis_df_w_int$centre_care', newobj.name='f.centre_care')
ds.asNumeric('analysis_df_w_int$int_age_', newobj='n.int_age_')
ds.asNumeric('analysis_df_w_int$age_years', newobj='n.age_years')
ds.asNumeric('analysis_df_w_int$int_pc_', newobj='n.int_pc_')
ds.asNumeric('analysis_df_w_int$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('analysis_df_w_int$birth_weight', newobj='n.birth_weight')
ds.asNumeric('analysis_df_w_int$child_id', newobj='n.child_id')
ds.asFactor('analysis_df_w_int$only_child', newobj.name='f.only_child')
ds.asFactor('analysis_df_w_int$sex', newobj.name='f.sex')
ds.asFactor('analysis_df_w_int$edu_m_.0', newobj.name='f.edu_m_.0')
ds.table('f.edu_m_.0')
ds.asFactor('analysis_df_w_int$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("analysis_df_w_int$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("analysis_df_w_int$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('analysis_df_w_int$f.cen_dur_cat', newobj.name='f.cen_dur_cat')



ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0', 'f.fam_splitup.0', 'f.mom.emp.dich','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'included_var', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'included_var', datasources=c.data[c('ninfea',"INMA")])




ds.dim('excluded_df_w_int')


ds.rep(0, times=8416, newobj = 'included', datasources=c.data[c('alspac')])
ds.rep(0, times=4794, newobj = 'included', datasources=c.data[c('generationR')])
ds.rep(0, times=15969, newobj = 'included', datasources=c.data[c('dnbc')])
ds.rep(0, times=72, newobj = 'included', datasources=c.data[c('eden')])
ds.rep(0, times=1785, newobj = 'included', datasources=c.data[c('elfe')])
ds.rep(0, times=305, newobj = 'included', datasources=c.data[c('INMA')])
ds.rep(0, times=3058, newobj = 'included', datasources=c.data[c('ninfea')])



### maing sure factors are factors and numerics are numerics
### set all variables to appropriate class in internalizing behavior 
ds.asFactor('excluded_df_w_int$centre_care', newobj.name='f.centre_care')
ds.asNumeric('excluded_df_w_int$int_age_', newobj='n.int_age_')
ds.asNumeric('excluded_df_w_int$age_years', newobj='n.age_years')
ds.asNumeric('excluded_df_w_int$int_pc_', newobj='n.int_pc_')
ds.asNumeric('excluded_df_w_int$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('excluded_df_w_int$birth_weight', newobj='n.birth_weight')
ds.asNumeric('excluded_df_w_int$child_id', newobj='n.child_id')
ds.asFactor('excluded_df_w_int$only_child', newobj.name='f.only_child')
ds.asFactor('excluded_df_w_int$sex', newobj.name='f.sex')
ds.asFactor('excluded_df_w_int$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('excluded_df_w_int$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("excluded_df_w_int$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("excluded_df_w_int$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('excluded_df_w_int$f.cen_dur_cat', newobj.name='f.cen_dur_cat')



ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0', 'f.fam_splitup.0', 'f.mom.emp.dich','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'excluded_var', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'excluded_var', datasources=c.data[c('ninfea',"INMA")])


ds.rbind(c('included_var', 'excluded_var'), newobj='compare')
ds.rbind(c('included_var', 'excluded_var'), newobj='compare', datasources=c.data[c('ninfea',"INMA")])
ds.dataFrame('compare', newobj='compare')
ds.table('compare$f.edu_m_.0')
datashield.workspace_save(c.data, "compare_included")

c.data <- DSI::datashield.login(logins = logindata, restore="compare_included")

################## descriptive statistics for included population in externalizing behavior

birthweight<-ds.glm('included~n.birth_weight', data='compare', family='binomial')
birthweight
mothersage<-ds.glm('included~n.agebirth_m_y', data='compare', family='binomial')
mothersage
ds.table("compare$f.edu_m_.0")
ds.table(rvar="compare$f.edu_m_.0",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)

#high = 1  Medium = 2Low = 3

ds.colnames('compare')
ds.table(rvar='compare$f.femp_cat_mom_0',cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)

ds.table(rvar="compare$f.fam_splitup.0",cvar='compare$included',exclude = 'NA', report.chisq.tests = TRUE, datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.table(rvar="compare$f.sex",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)
ds.table(rvar="compare$f.only_child",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)


## externalizing population

c.data <- DSI::datashield.login(logins = logindata, restore="all_pop_defined")


## included population for internalizing behavior population
ds.dim('analysis_df_w_ext')
ds.colnames('analysis_df_w_ext')
## excluded population for externalizing behavior population
ds.dim('excluded_df_w_ext')
ds.colnames('excluded_df_w_ext')


ds.rep(1, times=7229, newobj = 'included', datasources=c.data[c('alspac')])
ds.rep(1, times=2839, newobj = 'included', datasources=c.data[c('generationR')])
ds.rep(1, times=49011, newobj = 'included', datasources=c.data[c('dnbc')])
ds.rep(1, times=1191, newobj = 'included', datasources=c.data[c('eden')])
ds.rep(1, times=10838, newobj = 'included', datasources=c.data[c('elfe')])
ds.rep(1, times=1238, newobj = 'included', datasources=c.data[c('INMA')])
ds.rep(1, times=295, newobj = 'included', datasources=c.data[c('ninfea')])



### maing sure factors are factors and numerics are numerics
### set all variables to appropriate class in externalizing behavior 
ds.asFactor('analysis_df_w_ext$centre_care', newobj.name='f.centre_care')
ds.asNumeric('analysis_df_w_ext$age_years', newobj='n.age_years')
ds.asNumeric('analysis_df_w_ext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('analysis_df_w_ext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('analysis_df_w_ext$child_id', newobj='n.child_id')
ds.asFactor('analysis_df_w_ext$only_child', newobj.name='f.only_child')
ds.asFactor('analysis_df_w_ext$sex', newobj.name='f.sex')
ds.asFactor('analysis_df_w_ext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.table('f.edu_m_.0')
ds.asFactor('analysis_df_w_ext$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("analysis_df_w_ext$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("analysis_df_w_ext$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('analysis_df_w_ext$f.cen_dur_cat', newobj.name='f.cen_dur_cat')



ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0', 'f.fam_splitup.0', 'f.mom.emp.dich','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'included_var', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'included_var', datasources=c.data[c('ninfea',"INMA")])


ds.dim('excluded_df_w_ext')


ds.rep(0, times=8416, newobj = 'included', datasources=c.data[c('alspac')])
ds.rep(0, times=4793, newobj = 'included', datasources=c.data[c('generationR')])
ds.rep(0, times=17962, newobj = 'included', datasources=c.data[c('dnbc')])
ds.rep(0, times=72, newobj = 'included', datasources=c.data[c('eden')])
ds.rep(0, times=1784, newobj = 'included', datasources=c.data[c('elfe')])
ds.rep(0, times=305, newobj = 'included', datasources=c.data[c('INMA')])
ds.rep(0, times=3057, newobj = 'included', datasources=c.data[c('ninfea')])

### maing sure factors are factors and numerics are numerics
### set all variables to appropriate class in internalizing behavior 
ds.asFactor('excluded_df_w_ext$centre_care', newobj.name='f.centre_care')
ds.asNumeric('excluded_df_w_ext$ext_age_', newobj='n.ext_age_')
ds.asNumeric('excluded_df_w_ext$age_years', newobj='n.age_years')
ds.asNumeric('excluded_df_w_ext$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('excluded_df_w_ext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('excluded_df_w_ext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('excluded_df_w_ext$child_id', newobj='n.child_id')
ds.asFactor('excluded_df_w_ext$only_child', newobj.name='f.only_child')
ds.asFactor('excluded_df_w_ext$sex', newobj.name='f.sex')
ds.asFactor('excluded_df_w_ext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('excluded_df_w_ext$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("excluded_df_w_ext$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("excluded_df_w_ext$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('excluded_df_w_ext$f.cen_dur_cat', newobj.name='f.cen_dur_cat')

ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0', 'f.fam_splitup.0', 'f.mom.emp.dich','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'excluded_var', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.dataFrame(x=c('included','f.cen_dur_cat' ,'f.femp_cat_mom_0','f.centre_care', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'excluded_var', datasources=c.data[c("ninfea","INMA")])
ds.dim('excluded_var')
ds.dim('included_var')
ds.table('excluded_var$f.edu_m_.0')
ds.table('included_var$f.edu_m_.0')
ds.rbind(c('included_var','excluded_var'), newobj='compare')
ds.dataFrame('compare', newobj='compare')

ds.table('compare$f.edu_m_.0')
ds.table('compare$f.edu_m_.0')


datashield.workspace_save(c.data, "compare_externalizing")

c.data <- DSI::datashield.login(logins = logindata, restore="compare_externalizing")

################## descriptive statistics for included population in externalizing behavior

birthweight<-ds.glm('included~n.birth_weight', data='compare', family='binomial')
birthweight
mothersage<-ds.glm('included~n.agebirth_m_y', data='compare', family='binomial')
mothersage
ds.table("compare$f.edu_m_.0")
ds.table(rvar="compare$f.edu_m_.0",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)

#high = 1  Medium = 2Low = 3

ds.colnames('compare')
ds.table(rvar='compare$f.femp_cat_mom_0',cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)

ds.table(rvar="compare$f.fam_splitup.0",cvar='compare$included',exclude = 'NA', report.chisq.tests = TRUE, datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])
ds.table(rvar="compare$f.sex",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)
ds.table(rvar="compare$f.only_child",cvar='compare$included', exclude = 'NA', report.chisq.tests = TRUE)
