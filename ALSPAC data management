################################################################################
## Project: ECEC attendance and internalizing and externalizing behaviors in adolescence
## Script purpose: ALSPAC data management
## Date: 01/13/2023
## Author: Katharine M Barry
## Email: katharine.barry@iplesp.upmc.fr

#load libraries
library(DSMolgenisArmadillo)
library(dsBaseClient)
library(dsHelper)
library(DSI)
library(DSOpal)

#login to ALSPAC data
token <- armadillo.get_token("https://alspac-armadillo.molgenis.org")
builder <- DSI::newDSLoginBuilder()

builder$append(
  server = "alspac",
  url = "",
  table = "", 
  token = token,
  driver = "ArmadilloDriver"
)

logindata <- builder$build()

conns <- DSI::datashield.login(logins = logindata, assign = TRUE)

datashield.tables(conns)

############## assign tables #####################
####### non repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "lc13/2_1_core_1_3/non_rep" ,
  symbol = "alspac_core_nonrep")
####### repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "lc13/2_1_core_1_3/yearly_rep"  ,
  symbol = "alspac_core_repeat")
####### outcome variables ########################
datashield.assign.table(
  conns =   conns,
  table = "lc13/1_1_outcome_1_3/yearly_rep",
  symbol = "alspac_outcome")






######checking loaded tables:
# columns in the non repeated core data
ds.colnames("alspac_core_nonrep")
# columns in the repeated core data
ds.colnames("alspac_core_repeat")
#columns in the outcome data
ds.colnames("alspac_outcome")
#check dimensions
ds.dim("alspac_core_repeat")
ds.dim("alspac_core_nonrep")
ds.dim("alspac_outcome")



##### put data into the wide format ###############

ds.reShape(
  data.name = "alspac_core_repeat",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c(  "childcarecentre_", "childcarerel_","edu_f1_","edu_m_" ,"occup_f1_",       
                "occup_m_","famsize_child","childcareprof_","fam_splitup", "childcare_"),
  direction = "wide",
  newobj = "alspac_core_w",
  datasources = conns
)

#verifying columns
ds.colnames("alspac_core_w", datasources=conns)
ds.dim("alspac_core_w", datasources=conns)

##### reshape the outcome variable into wide format ####### 
ds.merge(
  x.name = "alspac_core_w",
  y.name = "alspac_outcome",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "analysis",
  datasources = conns)

#merge outcome variables with the non-repeated variables
ds.merge(
  x.name = "analysis",
  y.name = "alspac_core_nonrep",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "df_final",
  datasources = conns
)

## ---- check the merged variables
ds.colnames("df_final", datasources=conns)
### who evaluated outcomes
ds.table('df_final$int_eval_', datasources=conns)
ds.table('df_final$ext_eval_', datasources=conns)
###### childcare center variable will be coded into a dichotomise variable in which if a child
###### was enrolled in child care at year 1 and/or year 2, they will be yes and if not, no ######
ds.table('df_final')
#childcare center years 1,2
ds.table('df_final$childcarecentre_.1')
ds.table('df_final$childcarecentre_.2')
ds.table('df_final$childcarecentre_.3')
#recode as numeric in order to manipulate variable:
ds.asNumeric('df_final$childcarecentre_.1', newobj='centre_1')
ds.asNumeric('df_final$childcarecentre_.2', newobj='centre_2')

ds.asNumeric('df_final$childcarecentre_.3', newobj='centre_3')

#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='centre_1', forNA =100, newobj="NAcentre_.1")
ds.replaceNA(x='centre_2', forNA =100, newobj="NAcentre_.2")
ds.replaceNA(x='centre_3', forNA =100, newobj="NAcentre_.3")
ds.make(toAssign='NAcentre_.1 + NAcentre_.2+ NAcentre_.3', newobj = 'childcentre')
ds.table ('childcentre', datasources=conns) 
ds.recodeValues(var.name='childcentre', values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,NA), newobj='centre_care')
#if they were in childcare at least once in year 1 and year 2
ds.table('centre_care')

ds.dataFrame(x=c('centre_care','df_final'), newobj='df_2',datasources=conns)
ds.colnames('df_2')


ds.table ('childcentre', datasources=conns)# this variable shows us how many children attended childcare center in just one year,
#two years, or three years
#now, going to dichotomize the variable to have yes/no for childcare attendance at one point in time
##to understand the logic, 400 represents all missing, 300 means no childcare attendance in any years, 101 means childcare attendance at one point, etc
ds.recodeValues(var.name='childcentre',
                values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,NA), newobj='cen_dur')

ds.table('cen_dur')
ds.table('centre_care')
ds.dataFrame(x=c('df_2','cen_dur'), newobj='df_2')


ds.asNumeric('cen_dur', newobj='dur_num')
ds.recodeValues(var.name='dur_num',
                values2replace.vector = c(0,1,2,3,4),
                new.values.vector = c(0,1,1,2,2), newobj='cen_dur_cat')
ds.asFactor('cen_dur_cat', newobj.name='f.cen_dur_cat')
ds.table('cen_dur')
ds.table('centre_care')
ds.table('f.cen_dur_cat')

ds.dataFrame(x=c('df_2', 'f.cen_dur_cat'), newobj='df_2')




datashield.workspace_save(conns = conns, ws = "exposurecreation")

####### recoding of covariates: 

###############################################################
###############################################################
#### recoding covariates sibling position and mother and father occupation ###
ds.summary('df_2')
# creating a variable which allows us to know if the ALSPAC child is an only child or not:
#re code only child versus other
ds.asNumeric("df_2$sibling_pos", newobj = "num_sib")
ds.Boole(V1="num_sib", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="only_child")
ds.table('only_child') 
ds.table("df_2$sibling_pos")


#re-grouping mother's occupation into employed, unemployed, and other (at year 1)
ds.asNumeric("df_2$occup_m_.1", newobj='occ_num_m_1')
ds.table('occ_num_m_1')
ds.recodeValues(var.name='occ_num_m_1', values2replace.vector = c(1,2,3,4,5,6), new.values.vector = c(1,1,0,2,2,2),newobj="emp_cat_mom_1")
ds.table('emp_cat_mom_1') # 0=unemployed 1=employed 2=other
### no unemployed mothers in this cohort 
## convert to a factor variable
ds.asFactor('emp_cat_mom_1',newobj='femp_cat_mom_0')
ds.table('femp_cat_mom_0')


#re-grouping father's occupation into employed, unemployed, and other (at year 1)
ds.asNumeric("df_2$occup_f1_.1", newobj='occ_num_f_1')
ds.table('occ_num_f_1')
ds.recodeValues(var.name='occ_num_f_1', values2replace.vector = c(1,2,3,4,5,6), new.values.vector = c(1,1,0,2,2,2),newobj="emp_cat_dad_1")
ds.table('emp_cat_dad_1') # 0=unemployed 1=employed 2=other
### no unemployed fathers in this cohort 
## convert to a factor variable
ds.asFactor('emp_cat_dad_1',newobj='femp_cat_dad_1')
ds.table('femp_cat_dad_1')
ds.table('final$famsize_adult.0')
ds.colnames('final')
ds.dataFrame(x=c('df_2','femp_cat_mom_0', 'femp_cat_dad_1','only_child'), newobj='final')
datashield.workspace_save(conns = conns, ws = "covariates_trajectories")

####type of instrument and who answered questionnaire to measure internalizing behavior and externalizing behavior
conns <- DSI::datashield.login(logins = logindata, restore = "covariates_trajectories")
ds.colnames('final')
datashield.workspace_save(conns = conns, ws = "interactions")




###############################################################################


###  subsetting data for internalizing behavior and externalizing behavior ######

###   everyone that replied to child center outcome #####
ds.table("final$centre_care")
ds.dataFrameSubset(
  df.name = "final",
  newobj = "exposure_com",
  V1.name = "final$centre_care",
  V2.name = "0",
  Boolean.operator = ">=", keep.NAs = FALSE, datasources = conns
)

ds.colnames('exposure_com')

### creating subsets with all of the variables of interest

#creating subset of complete case data for internalizing behavior:

ds.dataFrame(x=c('exposure_com$cen_dur', 'exposure_com$f.cen_dur_cat','exposure_com$fam_splitup.0','exposure_com$birth_weight','exposure_com$int_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$int_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$edu_m_.0','exposure_com$femp_cat_mom_0','exposure_com$only_child', 'exposure_com$sex'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataint", datasources=conns)



#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataint",
  newobj = "dataint",
  V1.name = "dataint$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataint') 

#creating subset of complete case data for externalizing behavior:
ds.dataFrame(x=c('exposure_com$cen_dur', 'exposure_com$f.cen_dur_cat','exposure_com$fam_splitup.0','exposure_com$birth_weight', 'exposure_com$ext_age_','exposure_com$age_years','exposure_com$child_id','exposure_com$ext_pc_','exposure_com$centre_care','exposure_com$agebirth_m_y','exposure_com$edu_m_.0','exposure_com$femp_cat_mom_0','exposure_com$only_child','exposure_com$sex'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=TRUE, newobj="dataext", datasources=conns)

#need to subset so that all my outcomes come after my exposure variable
ds.dataFrameSubset(
  df.name = "dataext",
  newobj = "dataext",
  V1.name = "dataext$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = conns
)
ds.summary('dataext') 
ds.dim('dataint')
ds.dim('dataext')
ds.colnames('dataext')

datashield.workspace_save(conns = conns, ws = "lineardata")

conns <- DSI::datashield.login(logins = logindata, restore = "lineardata")
############ last bit of clean up to have cohesion across cohorts

### set all variables to appropriate class in internalizing behavior 
ds.asFactor('dataint$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataint$int_age_', newobj='n.int_age_')
ds.asNumeric('dataint$age_years', newobj='n.age_years')
ds.asNumeric('dataint$int_pc_', newobj='n.int_pc_')
ds.asNumeric('dataint$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataint$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataint$child_id', newobj='n.child_id')
ds.asFactor('dataint$only_child', newobj.name='f.only_child')
ds.asFactor('dataint$sex', newobj.name='f.sex')
ds.asFactor('dataint$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataint$fam_splitup.0', newobj.name='f.fam_splitup.0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("dataint$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asNumeric('dataint$cen_dur', newobj='n.cen_dur')
ds.dataFrame(x=c('dataint','n.cen_dur', 'f.fam_splitup.0', 'f.mom.emp.dich','f.centre_care','n.age_years', 'n.int_age_','n.int_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataint')


### set all variables to appropriate class in externalizing behavior
ds.asFactor('dataext$centre_care', newobj.name='f.centre_care')
ds.asNumeric('dataext$ext_age_', newobj='n.ext_age_')
ds.asNumeric('dataext$age_years', newobj='n.age_years')
ds.asNumeric('dataext$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('dataext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('dataext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('dataext$child_id', newobj='n.child_id')
ds.asFactor('dataext$only_child', newobj.name='f.only_child')
ds.asFactor('dataext$sex', newobj.name='f.sex')
ds.asFactor('dataext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('dataext$fam_splitup.0', newobj.name='f.fam_splitup.0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("dataext$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asNumeric('dataext$cen_dur', newobj='n.cen_dur')
ds.dataFrame(x=c('dataext', 'f.fam_splitup.0','n.cen_dur','f.mom.emp.dich','f.centre_care','n.age_years', 'n.ext_age_','n.ext_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id',  'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'dataext')

ds.colnames('dataint')
ds.colnames('dataext')

datashield.workspace_save(conns = conns, ws = "ldata")


####### checking measurement used for internalizing and externalizing behavior
ds.table('ext_comp$int_instr_.9') # SDQ
ds.table('ext_comp$ext_instr_.9')#SDQ
ds.table('exposure_com$ext_eval_.9')#parent
ds.table('exposure_com$int_eval_.9')# parent



