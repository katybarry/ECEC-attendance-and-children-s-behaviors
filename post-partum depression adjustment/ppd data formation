## max sample size ##
ds.dataFrame(x=c('final$ppd','final$ext_pc_','final$ext_age_','final$some_care','final$type_care','final$fam_splitup.0','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c('eden','generationR','dnbc','elfe','alspac')])

## note that ninfea did not measure professional care and INMA only measured centre based care

ds.reShape(
  data.name = "maxsample",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_", "ext_pc_"),
  direction = "wide", 
  newobj = "final_w")

ds.dim('final_w')



#_______________________________________ subset datasets for internalizing behavior sample
##____________________internalizing 
ds.dataFrame(x=c('final$ppd','final$fam_splitup.0','final$some_care','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$type_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="missinginternal", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])


ds.dim('missinginternal')
ds.colnames('missinginternal')

ds.dataFrameSubset(
  df.name = "missinginternal",
  newobj = "missinginternal_el",
  V1.name = "missinginternal$int_age_",
  V2.name = "4",
  Boolean.operator = ">", datasources = c.data
)

### outcome below 14 years of age
ds.dataFrameSubset(
  df.name = "missinginternal_el",
  newobj = "missinginternal_el",
  V1.name = "missinginternal_el$int_age_",
  V2.name = "14",
  Boolean.operator = "<", datasources = c.data
)
ds.dim('missinginternal_el')
ds.colnames('missinginternal_el')

#_____________ create wide subset

ds.reShape(
  data.name = "missinginternal_el",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "missinginternal_el_w")

ds.dim('missinginternal_el_w')

#_______________________________________________internalizing exposure
dh.defineCases(
  df = "missinginternal_el", 
  vars = c("some_care"),
  type = "any", 
  new_obj = "any_exp_int")


ds.length('any_exp_int')
ds.table('any_exp_int')


## ---- Create long subset ---------------------------------------------
ds.dataFrameSubset(
  df.name = "missinginternal_el", 
  V1.name = "any_exp_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_exp_int_l")

ds.dim('any_exp_int_l')


#______________________________________internalizing wide format subset
ds.reShape(
  data.name = "any_exp_int_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "any_exp_int_df_w")

ds.colnames('any_exp_int_df_w')
ds.dim('any_exp_int_df_w')
ds.table('any_exp_int_df_w$some_care')


#______________________________________internalizing outcome
dh.defineCases(
  df = "any_exp_int_l", 
  vars = c("int_pc"),
  type = "any", 
  new_obj = "any_out_int")

## ---- Create long subset -----------------------------------------------------
ds.dataFrameSubset(
  df.name = "any_exp_int_l", 
  V1.name = "any_out_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_out_int_df_l")


## ---- Create wide subset -----------------------------------------------------
ds.reShape(
  data.name = "any_out_int_df_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "any_out_int_df_w")

ds.dim('any_out_int_df_w')
ds.colnames('any_out_int_df_w')





################################################################################
# All covariates  
################################################################################

## Need to request missing variables
cov.def <- c("fam_splitup.0", "agebirth_m_y", "birth_weight", 
             "sex", "edu_m_.0", "femp_cat_mom_0", "only_child", "ppd")


################# Internalizing behavior for each cohort ##################################
ds.length('any_exp_int_df_w')
ds.colnames('any_exp_int_df_w')



## ---- Remainder --------------------------------------------------------------
dh.defineCases(
  df = "any_out_int_df_w", 
  vars = cov.def,
  type = "all", 
  new_obj = "all_cov_int", conns = c.data[c("eden", "elfe", "alspac", "dnbc", "generationR")])



ds.length('all_cov_int')
ds.table('all_cov_int')

ds.dataFrameSubset(
  df.name = "any_out_int_df_w", 
  V1.name = "all_cov_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "analysis_df_w_int")

ds.dim('analysis_df_w_int')

ds.colnames('analysis_df_w_int')
#############################
############################# 

ds.dim('missinginternal_el_w')
ds.colnames('missinginternal_el_w')
ds.dim('analysis_df_w_int')
ds.colnames('analysis_df_w_int')



datashield.workspace_save(c.data, "ppd_int")


#####################################################################################
#####################################################################################
#####################################################################################
#_________________ externalizing behavior population


#_______________________________________ subset datasets for externalizing behavior sample
##
ds.dataFrame(x=c('final$ppd','final$type_care','final$some_care','final$fam_splitup.0','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="missingexternal", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])



ds.dim('missingexternal')
ds.colnames('missingexternal')

ds.dataFrameSubset(
  df.name = "missingexternal",
  newobj = "missingexternal_el",
  V1.name = "missingexternal$ext_age_",
  V2.name = "4",
  Boolean.operator = ">", datasources = c.data
)

ds.dim('missingexternal_el')

ds.dataFrameSubset(
  df.name = "missingexternal_el",
  newobj = "missingexternal_el",
  V1.name = "missingexternal_el$ext_age_",
  V2.name = "14",
  Boolean.operator = "<", datasources = c.data
)

ds.dim('missingexternal_el')
ds.colnames('missingexternal_el')

#_____________ create wide subset

ds.reShape(
  data.name = "missingexternal_el",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "missingexternal_el_w")

ds.dim('missingexternal_el_w')

#_______________________________________________externalizing exposure
dh.defineCases(
  df = "missingexternal_el", 
  vars = c("type_care"),
  type = "any", 
  new_obj = "any_exp_ext")


ds.length('any_exp_ext')
ds.table('any_exp_ext')


## ---- Create long subset ---------------------------------------------
ds.dataFrameSubset(
  df.name = "missingexternal_el", 
  V1.name = "any_exp_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_exp_ext_l")

ds.dim('any_exp_ext_l')


#______________________________________externalizing wide format subset
ds.reShape(
  data.name = "any_exp_ext_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "any_exp_ext_df_w")

ds.colnames('any_exp_ext_df_w')
ds.dim('any_exp_ext_df_w')
ds.table('any_exp_ext_df_w$type_care')





#______________________________________externalizing outcome
dh.defineCases(
  df = "any_exp_ext_l", 
  vars = c("ext_pc"),
  type = "any", 
  new_obj = "any_out_ext")

## ---- Create long subset -----------------------------------------------------
ds.dataFrameSubset(
  df.name = "any_exp_ext_l", 
  V1.name = "any_out_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_out_ext_df_l")


## ---- Create wide subset -----------------------------------------------------
ds.reShape(
  data.name = "any_out_ext_df_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "any_out_ext_df_w")

ds.dim('any_out_ext_df_w')
ds.colnames('any_out_ext_df_w')






################################################################################
# All covariates  
################################################################################

## Need to request missing variables
cov.def <- c("fam_splitup.0", "agebirth_m_y", "birth_weight", 
             "sex", "edu_m_.0", "femp_cat_mom_0", "only_child", "ppd")


################# externalizing behavior for each cohort ##################################
ds.length('any_exp_ext_df_w')
ds.colnames('any_exp_ext_df_w')




## ---- Remainder --------------------------------------------------------------
dh.defineCases(
  df = "any_out_ext_df_w", 
  vars = cov.def,
  type = "all", 
  new_obj = "all_cov_ext", 
  conns = c.data[c("eden", "elfe", "alspac", "dnbc", "generationR")])

ds.length('all_cov_ext')
ds.table('all_cov_ext')


ds.dataFrameSubset(
  df.name = "any_out_ext_df_w", 
  V1.name = "all_cov_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "analysis_df_w_ext")

ds.dim('analysis_df_w_ext')
ds.colnames('analysis_df_w_ext')
#############################
############################# 

datashield.workspace_save(c.data, "ppd_ext")



ds.mean('analysis_df_w_int$int_pc.7')

## check all tables 
## exposure
ds.dim('any_exp_ext_df_w')
## outcome
ds.dim('any_out_ext_df_w')
## covariates
ds.dim('analysis_df_w_ext')
## excluded population
ds.dim('excluded_df_w_ext')

## included population for internalizing behavior population
ds.dim('analysis_df_w_int')
## excluded population for internalizing behavior population
ds.dim('excluded_df_w_int')

## included population for externalizing behavior population
ds.dim('analysis_df_w_ext')
## excluded population for externalizing behavior population
ds.dim('excluded_df_w_ext')

ds.colnames('analysis_df_w_int')
# ALSPAC
ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "n.int_age_",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8", "int_pc_.9", "int_pc_.10", 
              "int_pc_.11","int_pc_.12", "int_pc_.13"),
  direction = "long", 
  newobj = "analysis_df_l_int", 
  datasources=c.data[c("alspac")])
ds.colnames('analysis_df_l_int', datasources=c.data[c("alspac")])
ds.dim('analysis_df_l_int', datasources=c.data[c("alspac")])
# Gen R

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "n.int_age_",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8", "int_pc_.9", "int_pc_.10", 
              "int_pc_.11","int_pc_.12"),
  direction = "long", 
  newobj = "analysis_df_l_int", 
  datasources=c.data[c("generationR")])
ds.colnames('analysis_df_l_int', datasources=c.data[c("generationR")])
ds.dim('analysis_df_l_int', datasources=c.data[c("generationR")])

# DNBC
ds.colnames('analysis_df_w_int')
ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "n.int_age_",
  idvar.name = "child_id",
  varying = c("int_pc_.7","int_pc_.8", 
              "int_pc_.11","int_pc_.12","int_pc_.13"),
  direction = "long", 
  newobj = "analysis_df_l_int", 
  datasources=c.data[c("dnbc")])
ds.colnames('analysis_df_l_int', datasources=c.data[c("dnbc")])
ds.dim('analysis_df_l_int', datasources=c.data[c("dnbc")])

ds.meanSdGp(x='analysis_df_l_int$n.int_pc_', y='analysis_df_l_int$n.int_age_', datasources=c.data[c("dnbc")])

### check the repetition of things here


# eden

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "n.int_age_",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8"),
  direction = "long", 
  newobj = "analysis_df_l_int", 
  datasources=c.data[c("eden")])
ds.colnames('analysis_df_l_int', datasources=c.data[c("eden")])
ds.dim('analysis_df_l_int', datasources=c.data[c("eden")])

# elfe

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "n.int_age_",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6"),
  direction = "long", 
  newobj = "analysis_df_l_int", 
  datasources=c.data[c("elfe")])
ds.colnames('analysis_df_l_int', datasources=c.data[c("elfe")])
ds.dim('analysis_df_l_int', datasources=c.data[c("elfe")])





## externalizing behavior long format
### reshape from wide format to long format for testing

ds.colnames('analysis_df_w_ext')

# ALSPAC
ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "n.ext_age_",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8", "ext_pc_.9", "ext_pc_.10", 
              "ext_pc_.11","ext_pc_.12", "ext_pc_.13"),
  direction = "long", 
  newobj = "analysis_df_l_ext", 
  datasources=c.data[c("alspac")])
ds.colnames('analysis_df_l_ext', datasources=c.data[c("alspac")])
ds.dim('analysis_df_l_ext', datasources=c.data[c("alspac")])
# Gen R

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "n.ext_age_",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8", "ext_pc_.9", "ext_pc_.10", 
              "ext_pc_.11","ext_pc_.12"),
  direction = "long", 
  newobj = "analysis_df_l_ext", 
  datasources=c.data[c("generationR")])
ds.colnames('analysis_df_l_ext', datasources=c.data[c("generationR")])
ds.dim('analysis_df_l_ext', datasources=c.data[c("generationR")])

# DNBC

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "n.ext_age_",
  idvar.name = "child_id",
  varying = c("ext_pc_.7","ext_pc_.8", 
              "ext_pc_.11","ext_pc_.12","ext_pc_.13"),
  direction = "long", 
  newobj = "analysis_df_l_ext", 
  datasources=c.data[c("dnbc")])
ds.colnames('analysis_df_l_ext', datasources=c.data[c("dnbc")])
ds.dim('analysis_df_l_ext', datasources=c.data[c("dnbc")])

# eden

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "n.ext_age_",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8"),
  direction = "long", 
  newobj = "analysis_df_l_ext", 
  datasources=c.data[c("eden")])
ds.colnames('analysis_df_l_ext', datasources=c.data[c("eden")])
ds.dim('analysis_df_l_ext', datasources=c.data[c("eden")])

# elfe

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "n.ext_age_",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6"),
  direction = "long", 
  newobj = "analysis_df_l_ext", 
  datasources=c.data[c("elfe")])
ds.colnames('analysis_df_l_ext', datasources=c.data[c("elfe")])
ds.dim('analysis_df_l_ext', datasources=c.data[c("elfe")])






### reshape from wide format to long format for testing

### make sure everything if a factor and numeric

### maing sure factors are factors and numerics are numerics
### set all variables to appropriate class in internalizing behavior 
ds.asFactor('analysis_df_l_int$type_care', newobj.name='f.type_care')
ds.asFactor('analysis_df_l_int$some_care', newobj.name='f.some_care')
ds.asNumeric('analysis_df_l_int$int_age_', newobj='n.int_age_')
ds.asNumeric('analysis_df_l_int$age_years', newobj='n.age_years')
ds.asNumeric('analysis_df_l_int$int_pc_', newobj='n.int_pc_')
ds.asNumeric('analysis_df_l_int$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('analysis_df_l_int$birth_weight', newobj='n.birth_weight')
ds.asNumeric('analysis_df_l_int$child_id', newobj='n.child_id')
ds.asFactor('analysis_df_l_int$only_child', newobj.name='f.only_child')
ds.asFactor('analysis_df_l_int$sex', newobj.name='f.sex')
ds.asFactor('analysis_df_l_int$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('analysis_df_l_int$ppd', newobj.name='f.ppd')
ds.table('f.edu_m_.0')
ds.asFactor('analysis_df_l_int$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("analysis_df_l_int$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("analysis_df_l_int$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')

ds.colnames('analysis_df_l_int')




ds.dataFrame(x=c('analysis_df_l_int','f.ppd','f.type_care','f.some_care','f.femp_cat_mom_0', 'f.fam_splitup.0', 'f.mom.emp.dich','n.int_age_','n.int_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'analysis_df_l_int', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])




### set all variables to appropriate class in externalizing behavior
ds.asFactor('analysis_df_l_ext$type_care', newobj.name='f.type_care')
ds.asFactor('analysis_df_l_ext$some_care', newobj.name='f.some_care')
ds.asNumeric('analysis_df_l_ext$ext_age_', newobj='n.ext_age_')
ds.asNumeric('analysis_df_l_ext$age_years', newobj='n.age_years')
ds.asNumeric('analysis_df_l_ext$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('analysis_df_l_ext$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('analysis_df_l_ext$birth_weight', newobj='n.birth_weight')
ds.asNumeric('analysis_df_l_ext$child_id', newobj='n.child_id')
ds.asFactor('analysis_df_l_ext$ppd', newobj.name='f.ppd')
ds.asFactor('analysis_df_l_ext$only_child', newobj.name='f.only_child')
ds.asFactor('analysis_df_l_ext$sex', newobj.name='f.sex')
ds.asFactor('analysis_df_l_ext$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('analysis_df_l_ext$fam_splitup.0', newobj.name='f.fam_splitup.0')
ds.asFactor("analysis_df_l_ext$femp_cat_mom_0", newobj.name='f.femp_cat_mom_0')
# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("analysis_df_l_ext$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')

ds.dataFrame(x=c('analysis_df_l_ext','f.ppd','f.some_care','f.fam_splitup.0','f.femp_cat_mom_0','f.mom.emp.dich','f.type_care','n.ext_age_','n.ext_pc_', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id',  'f.only_child', 'f.sex', 'f.edu_m_.0'), newobj = 'analysis_df_l_ext', datasources=c.data[c('dnbc', 'eden', 'elfe', "alspac", "generationR")])


datashield.workspace_save(c.data, "ppd_data")


ds.dim('analysis_df_w_int')
ds.dim('analysis_df_w_ext')



