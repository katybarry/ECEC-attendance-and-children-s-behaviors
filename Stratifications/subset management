
#load libraries
library(DSMolgenisArmadillo)
library(remotes)
install_github("lifecycle-project/ds-helper")
library(dsBaseClient)
library(dsHelper)
library(DSI)
library(DSOpal)

#login to all cohorts

## tokens

tokenelfe <- armadillo.get_token("https://armadillo.sicopre.elfe-france.fr")
tokeneden <- armadillo.get_token("https://armadillo.sicopre.elfe-france.fr")
tokenalspac <- armadillo.get_token("https://alspac-armadillo.molgenis.org")
#### login

builder <- DSI::newDSLoginBuilder()
#ALSPAC
builder$append(
  server = "alspac",
  url = "https://alspac-armadillo.molgenis.org",
  token = tokenalspac,
  driver = "ArmadilloDriver")

#GEN R
builder$append(server = "generationR", 
               url = "https://opal.erasmusmc.nl", user = "", 
               password = "",
               driver = "OpalDriver")

# DNBC
builder$append(server = "dnbc",
               url = "https://opal.sund.ku.dk",
               user ="",
               password= "",
               driver = "OpalDriver" )
#EDEN
builder$append(server ="eden",
               url="https://armadillo.sicopre.elfe-france.fr",
               token=tokeneden,
               driver="ArmadilloDriver")
# INMA
builder$append(server = "INMA", 
               url = "https://opal.isglobal.org/repo", 
               user = "", 
               password = "",
               driver = "OpalDriver",
               profile='rock-inma')
# ELFE
builder$append(server ="elfe",
               url="https://armadillo.sicopre.elfe-france.fr",
               token=tokenelfe,
               driver="ArmadilloDriver")

# NINFEA
builder$append(server = "ninfea", 
               url = "https://www.lifecycle.unito.it", 
               user = "", 
               password = "",
               driver = "OpalDriver")
# all login
logindata <- builder$build()
c.data <- DSI::datashield.login(logins = logindata, restore="strata_new")

ds.colnames('analysis_df_l_int')
ds.table('analysis_df_l_int$f.sex')
ds.asNumeric('analysis_df_l_int$f.sex', newobj="sex_num")

ds.dataFrameSubset(
  df.name = "analysis_df_l_int", 
  V1.name = "sex_num", 
  V2.name = '1', 
  Boolean.operator = "==", 
  newobj = "boys_data")

ds.dim('boys_data')
ds.table('analysis_df_l_int$f.sex')


ds.dataFrameSubset(
  df.name = "analysis_df_l_int", 
  V1.name = "sex_num", 
  V2.name = '2', 
  Boolean.operator = "==", 
  newobj = "girls_data")

ds.dim('girls_data')
ds.colnames('girls_data')
datashield.workspace_save(c.data, "sex_data_int_prep_new")


### externalizing behavior

ds.colnames('analysis_df_l_ext')
ds.table('analysis_df_l_ext$f.sex')
ds.asNumeric('analysis_df_l_ext$f.sex', newobj="sex_num")

ds.dataFrameSubset(
  df.name = "analysis_df_l_ext", 
  V1.name = "sex_num", 
  V2.name = '1', 
  Boolean.operator = "==", 
  newobj = "boys_data")

ds.dim('boys_data')
ds.table('analysis_df_l_ext$f.sex')


ds.dataFrameSubset(
  df.name = "analysis_df_l_ext", 
  V1.name = "sex_num", 
  V2.name = '2', 
  Boolean.operator = "==", 
  newobj = "girls_data")

ds.dim('girls_data')
ds.colnames('girls_data')
datashield.workspace_save(c.data, "sex_data_ext_prep_new")



c.data <- DSI::datashield.login(logins = logindata, restore="internal_income_prep")

ds.colnames('int_income')


ds.colnames('int_income')
ds.table('int_income$flowincome')
ds.asNumeric('int_income$flowincome', newobj="income_num")

ds.dataFrameSubset(
  df.name = "int_income", 
  V1.name = "income_num", 
  V2.name = '1', 
  Boolean.operator = "==", 
  newobj = "lowincome_data")

ds.dataFrameSubset(
  df.name = "int_income", 
  V1.name = "income_num", 
  V2.name = '0', 
  Boolean.operator = "==", 
  newobj = "highincome_data")

datashield.workspace_save(c.data, "income_data_int_prep_new")


c.data <- DSI::datashield.login(logins = logindata, restore="external_income_strata")

ds.colnames('ext_income')
ds.table('ext_income$flowincome')
ds.asNumeric('ext_income$flowincome', newobj="income_num")

ds.dataFrameSubset(
  df.name = "ext_income", 
  V1.name = "income_num", 
  V2.name = '1', 
  Boolean.operator = "==", 
  newobj = "lowincome_data")

ds.dataFrameSubset(
  df.name = "ext_income", 
  V1.name = "income_num", 
  V2.name = '0', 
  Boolean.operator = "==", 
  newobj = "highincome_data")

datashield.workspace_save(c.data, "income_data_ext_prep_new")



