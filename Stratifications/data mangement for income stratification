#load libraries
library(DSMolgenisArmadillo)
library(dsBaseClient)
library(remotes)
install_github("lifecycle-project/ds-helper")
library(DSI)
library(DSOpal)
library('stringr')
#login to all cohorts

tokenelfe <- armadillo.get_token("https://armadillo.sicopre.elfe-france.fr")
tokeneden <- armadillo.get_token("https://armadillo.sicopre.elfe-france.fr")
tokenalspac <- armadillo.get_token("https://alspac-armadillo.molgenis.org")
#### login

builder <- DSI::newDSLoginBuilder()
#ALSPAC
builder$append(
  server = "alspac",
  url = "https://alspac-armadillo.molgenis.org",
  token = tokenalspac,
  driver = "ArmadilloDriver")

#GEN R
builder$append(server = "generationR", 
               url = "https://opal.erasmusmc.nl", user = "", 
               password = "",
               driver = "OpalDriver")

# DNBC
builder$append(server = "dnbc",
               url = "https://opal.sund.ku.dk",
               user ="",
               password= "",
               driver = "OpalDriver" )
#EDEN
builder$append(server ="eden",
               url="https://armadillo.sicopre.elfe-france.fr",
               token=tokeneden,
               driver="ArmadilloDriver")
# INMA
builder$append(server = "INMA", 
               url = "https://opal.isglobal.org/repo", 
               user = "", 
               password = "",
               driver = "OpalDriver",
               profile='rock-inma')
# ELFE
builder$append(server ="elfe",
               url="https://armadillo.sicopre.elfe-france.fr",
               token=tokenelfe,
               driver="ArmadilloDriver")

# NINFEA
builder$append(server = "ninfea", 
               url = "https://www.lifecycle.unito.it", 
               user = "", 
               password = "",
               driver = "OpalDriver")
# all login
logindata <- builder$build()
c.data <- DSI::datashield.login(logins = logindata, restore="interactions")

ds.colnames('final')
ds.dim('final')

## dichotomize income level for interaction tests
ds.asNumeric("final$eusilc_income_quintiles", newobj='numincome')
ds.table('numincome')
ds.recodeValues(var.name='numincome', values2replace.vector = c(1,2,3,4,5), new.values.vector = c(1,1,0,0,0), newobj="lowincome")
ds.table('lowincome') # 0=more than 40% income level 1=40% or below income level
ds.asFactor(input.var.name = 'lowincome', newobj.name = 'flowincome')
ds.dataFrame(x=c('final','flowincome'), newobj='final', datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac', 'INMA')])
ds.dataFrame(x=c('final','flowincome'), newobj='final', stringsAsFactors = FALSE, datasources = c.data[c('ninfea')])
ds.colnames('final')


## max sample size ##
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$fam_splitup.0','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c("INMA")])
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c('ninfea')])


ds.reShape(
  data.name = "maxsample",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_", "ext_pc_"),
  direction = "wide", 
  newobj = "final_w")

ds.dim('final_w')



#_______________________________________ subset datasets for internalizing behavior sample
##____________________internalizing 
ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$fam_splitup.0','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="missinginternal", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])
ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="missinginternal", datasources = c.data[c('ninfea')])
ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$birth_weight','final$sex','final$int_age_','final$age_years','final$child_id','final$int_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="missinginternal", datasources = c.data[c("INMA")])

ds.dim('missinginternal')
ds.colnames('missinginternal')

ds.dataFrameSubset(
  df.name = "missinginternal",
  newobj = "missinginternal_el",
  V1.name = "missinginternal$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = c.data
)

ds.dim('missinginternal_el')
ds.colnames('missinginternal_el')

#_____________ create wide subset

ds.reShape(
  data.name = "missinginternal_el",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "missinginternal_el_w")

ds.dim('missinginternal_el_w')

#_______________________________________________internalizing exposure
dh.defineCases(
  df = "missinginternal_el", 
  vars = c("centre_care"),
  type = "any", 
  new_obj = "any_exp_int")


ds.length('any_exp_int')
ds.table('any_exp_int')


## ---- Create long subset ---------------------------------------------
ds.dataFrameSubset(
  df.name = "missinginternal_el", 
  V1.name = "any_exp_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_exp_int_l")

ds.dim('any_exp_int_l')


#______________________________________internalizing wide format subset
ds.reShape(
  data.name = "any_exp_int_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "any_exp_int_df_w")

ds.colnames('any_exp_int_df_w')
ds.dim('any_exp_int_df_w')
ds.table('any_exp_int_df_w$centre_care')



#______________________________________internalizing outcome
dh.defineCases(
  df = "any_exp_int_l", 
  vars = c("int_pc"),
  type = "any", 
  new_obj = "any_out_int")

## ---- Create long subset -----------------------------------------------------
ds.dataFrameSubset(
  df.name = "any_exp_int_l", 
  V1.name = "any_out_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_out_int_df_l")


## ---- Create wide subset -----------------------------------------------------
ds.reShape(
  data.name = "any_out_int_df_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("int_pc_"),
  direction = "wide", 
  newobj = "any_out_int_df_w")

ds.dim('any_out_int_df_w')
ds.colnames('any_out_int_df_w')



################################################################################
# All covariates  
################################################################################

## Need to request missing variables
cov.def <- c("flowincome","fam_splitup.0", "agebirth_m_y", "birth_weight", 
             "sex", "edu_m_.0", "femp_cat_mom_0", "only_child")


################# Internalizing behavior for each cohort ##################################
ds.length('any_exp_int_df_w')
ds.colnames('any_exp_int_df_w')

## ---- NINFEA and INMA  -------------------------------------------------------------------
dh.defineCases(
  df = "any_out_int_df_w", 
  vars = cov.def[cov.def != "fam_splitup.0"],
  type = "all", 
  new_obj = "all_cov_int", 
  conns = c.data[c("ninfea", "INMA")])


## ---- Remainder --------------------------------------------------------------
dh.defineCases(
  df = "any_out_int_df_w", 
  vars = cov.def,
  type = "all", 
  new_obj = "all_cov_int", 
  conns = c.data[c("eden", "elfe", "alspac", "dnbc", "generationR")])

ds.length('all_cov_int')
ds.table('all_cov_int')


ds.dataFrameSubset(
  df.name = "any_out_int_df_w", 
  V1.name = "all_cov_int", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "analysis_df_w_int")

ds.dim('analysis_df_w_int')
ds.colnames('analysis_df_w_int')
#############################
############################# 

# ALSPAC
ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8", "int_pc_.9", "int_pc_.10", 
              "int_pc_.11","int_pc_.12", "int_pc_.13", "int_pc_.14","int_pc_.16", "int_pc_.17", "int_pc_.18"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("alspac")])
ds.colnames('df_int_income_l', datasources=c.data[c("alspac")])
ds.dim('df_int_income_l', datasources=c.data[c("alspac")])
# Gen R

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8", "int_pc_.9", "int_pc_.10", 
              "int_pc_.11","int_pc_.12"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("generationR")])
ds.colnames('df_int_income_l', datasources=c.data[c("generationR")])
ds.dim('df_int_income_l', datasources=c.data[c("generationR")])

# DNBC

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.7","int_pc_.8", 
              "int_pc_.11","int_pc_.12","int_pc_.13", "int_pc_.14"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("dnbc")])
ds.colnames('df_int_income_l', datasources=c.data[c("dnbc")])
ds.dim('df_int_income_l', datasources=c.data[c("dnbc")])

# eden

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6","int_pc_.7","int_pc_.8"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("eden")])
ds.colnames('df_int_income_l', datasources=c.data[c("eden")])
ds.dim('df_int_income_l', datasources=c.data[c("eden")])

# elfe

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.5","int_pc_.6"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("elfe")])
ds.colnames('df_int_income_l', datasources=c.data[c("elfe")])
ds.dim('df_int_income_l', datasources=c.data[c("elfe")])

# INMA

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("int_pc_.7","int_pc_.8","int_pc_.9", "int_pc_.10", "int_pc_.11", "int_pc_.12"),
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("INMA")])
ds.colnames('df_int_income_l', datasources=c.data[c("INMA")])
ds.dim('df_int_income_l', datasources=c.data[c("INMA")])

# NINFEA

ds.reShape(
  data.name = "analysis_df_w_int",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = "int_pc_.13",
  direction = "long", 
  newobj = "df_int_income_l", 
  datasources=c.data[c("ninfea")])
ds.colnames('df_int_income_l', datasources=c.data[c("ninfea")])
ds.dim('df_int_income_l', datasources=c.data[c("ninfea")])

datashield.workspace_save(c.data, "income_interactions_int")
##### making strata for the interactions

#c.data <- DSI::datashield.login(logins = logindata, restore="income_interactions_int")

ds.asFactor('df_int_income_l$centre_care', newobj.name='f.centre_care')
ds.asFactor('df_int_income_l$flowincome', newobj.name='f.flowincome')
ds.asNumeric('df_int_income_l$int_age_', newobj='n.int_age_')
ds.asNumeric('df_int_income_l$int_age_', newobj='n.int_pc_')
ds.asNumeric('df_int_income_l$age_years', newobj='n.age_years')
ds.asNumeric('df_int_income_l$int_pc_', newobj='n.int_pc_')
ds.asNumeric('df_int_income_l$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('df_int_income_l$birth_weight', newobj='n.birth_weight')
ds.asNumeric('df_int_income_l$child_id', newobj='n.child_id')
ds.asFactor('df_int_income_l$only_child', newobj.name='f.only_child')
ds.asFactor('df_int_income_l$sex', newobj.name='f.sex')
ds.asFactor('df_int_income_l$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('df_int_income_l$fam_splitup.0', newobj.name='f.fam_splitup.0', datasources = c.data[c('alspac', 'generationR', 'dnbc', 'eden', 'elfe')])

# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("df_int_income_l$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('df_int_income_l$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')
ds.asFactor('df_int_income_l$f.cen_dur_cat', newobj.name='f.cen_dur_cat')

ds.dataFrame(x=c('df_int_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.int_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex','f.fam_splitup.0', 'n.int_pc_'), newobj='int_income', datasources = c.data[c('generationR', 'dnbc', 'eden', 'elfe')])
ds.dataFrame(x=c('df_int_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.int_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex', 'n.int_pc_'), newobj='int_income', datasources = c.data[c('INMA')])
ds.dataFrame(x=c('df_int_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.int_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex', 'n.int_pc_'), newobj='int_income', stringsAsFactors = FALSE, datasources = c.data[c('ninfea')])
ds.dataFrame(x=c('df_int_income_l',"f.femp_cat_mom_0", "f.mom.emp.dich", 'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.int_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex','f.fam_splitup.0', 'n.int_pc_'), newobj='int_income', datasources = c.data[c('alspac')])

ds.colnames ('int_income')

datashield.workspace_save(c.data, "internal_income_prep")

## dichotomize income level for interaction tests
ds.asNumeric("final$eusilc_income_quintiles", newobj='numincome')
ds.table('numincome')
ds.recodeValues(var.name='numincome', values2replace.vector = c(1,2,3,4,5), new.values.vector = c(1,1,0,0,0), newobj="lowincome")
ds.table('lowincome') # 0=more than 40% income level 1=40% or below income level
ds.asFactor(input.var.name = 'lowincome', newobj.name = 'flowincome')
ds.dataFrame(x=c('final','flowincome'), newobj='final', datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac', 'INMA')])
ds.dataFrame(x=c('final','flowincome'), newobj='final',stringsAsFactors = FALSE,  datasources = c.data[c('ninfea')])

ds.colnames('final')


## max sample size ##
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$fam_splitup.0','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c("INMA")])
ds.dataFrame(x=c('final$flowincome','final$ext_pc_','final$ext_age_','final$f.cen_dur_cat','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="maxsample", datasources = c.data[c('ninfea')])



ds.reShape(
  data.name = "maxsample",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_", "ext_pc_"),
  direction = "wide", 
  newobj = "final_w")

ds.dim('final_w')

#_______________________________________ subset datasets for externalizing behavior sample
##____________________externalizing 

ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$fam_splitup.0','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="missingexternal", datasources = c.data[c('eden', 'generationR', 'dnbc','elfe','alspac')])
ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = TRUE, completeCases=FALSE, newobj="missingexternal", datasources = c.data[c("INMA")])
ds.dataFrame(x=c('final$flowincome','final$f.cen_dur_cat','final$birth_weight','final$sex','final$ext_age_','final$age_years','final$child_id','final$ext_pc_','final$centre_care','final$agebirth_m_y','final$edu_m_.0','final$femp_cat_mom_0','final$only_child'), check.names=TRUE, stringsAsFactors = FALSE, completeCases=FALSE, newobj="missingexternal", datasources = c.data[c('ninfea')])




ds.dim('missingexternal')
ds.colnames('missingexternal')

ds.dataFrameSubset(
  df.name = "missingexternal",
  newobj = "missingexternal_el",
  V1.name = "missingexternal$age_years",
  V2.name = "4",
  Boolean.operator = ">", datasources = c.data
)

ds.dim('missingexternal_el')
ds.colnames('missingexternal_el')

#_____________ create wide subset

ds.reShape(
  data.name = "missingexternal_el",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "missingexternal_el_w")

ds.dim('missingexternal_el_w')

#_______________________________________________externalizing exposure
dh.defineCases(
  df = "missingexternal_el", 
  vars = c("centre_care"),
  type = "any", 
  new_obj = "any_exp_ext")


ds.length('any_exp_ext')
ds.table('any_exp_ext')


## ---- Create long subset ---------------------------------------------
ds.dataFrameSubset(
  df.name = "missingexternal_el", 
  V1.name = "any_exp_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_exp_ext_l")

ds.dim('any_exp_ext_l')


#______________________________________externalizing wide format subset
ds.reShape(
  data.name = "any_exp_ext_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "any_exp_ext_df_w")

ds.colnames('any_exp_ext_df_w')
ds.dim('any_exp_ext_df_w')
ds.table('any_exp_ext_df_w$centre_care')



#______________________________________externalizing outcome
dh.defineCases(
  df = "any_exp_ext_l", 
  vars = c("ext_pc"),
  type = "any", 
  new_obj = "any_out_ext")

## ---- Create long subset -----------------------------------------------------
ds.dataFrameSubset(
  df.name = "any_exp_ext_l", 
  V1.name = "any_out_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "any_out_ext_df_l")


## ---- Create wide subset -----------------------------------------------------
ds.reShape(
  data.name = "any_out_ext_df_l",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c("ext_pc_"),
  direction = "wide", 
  newobj = "any_out_ext_df_w")

ds.dim('any_out_ext_df_w')
ds.colnames('any_out_ext_df_w')



################################################################################
# All covariates  
################################################################################

## Need to request missing variables
cov.def <- c("flowincome","fam_splitup.0", "agebirth_m_y", "birth_weight", 
             "sex", "edu_m_.0", "femp_cat_mom_0", "only_child")


################# externalizing behavior for each cohort ##################################
ds.length('any_exp_ext_df_w')
ds.colnames('any_exp_ext_df_w')

## ---- NINFEA and INMA  -------------------------------------------------------------------
dh.defineCases(
  df = "any_out_ext_df_w", 
  vars = cov.def[cov.def != "fam_splitup.0"],
  type = "all", 
  new_obj = "all_cov_ext", 
  conns = c.data[c("ninfea", "INMA")])


## ---- Remainder --------------------------------------------------------------
dh.defineCases(
  df = "any_out_ext_df_w", 
  vars = cov.def,
  type = "all", 
  new_obj = "all_cov_ext", 
  conns = c.data[c("eden", "elfe", "alspac", "dnbc", "generationR")])

ds.length('all_cov_ext')
ds.table('all_cov_ext')


ds.dataFrameSubset(
  df.name = "any_out_ext_df_w", 
  V1.name = "all_cov_ext", 
  V2.name = "1", 
  Boolean.operator = "==", 
  keep.NAs = FALSE, 
  newobj = "analysis_df_w_ext")

ds.dim('analysis_df_w_ext')
ds.colnames('analysis_df_w_ext')
#############################
############################# 

# ALSPAC
ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8", "ext_pc_.9", "ext_pc_.10", 
              "ext_pc_.11","ext_pc_.12", "ext_pc_.13", "ext_pc_.14","ext_pc_.16", "ext_pc_.17", "ext_pc_.18"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("alspac")])
ds.colnames('df_ext_income_l', datasources=c.data[c("alspac")])
ds.dim('df_ext_income_l', datasources=c.data[c("alspac")])
# Gen R

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8", "ext_pc_.9", "ext_pc_.10", 
              "ext_pc_.11","ext_pc_.12"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("generationR")])
ds.colnames('df_ext_income_l', datasources=c.data[c("generationR")])
ds.dim('df_ext_income_l', datasources=c.data[c("generationR")])

# DNBC

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.7","ext_pc_.8", 
              "ext_pc_.11","ext_pc_.12","ext_pc_.13", "ext_pc_.14"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("dnbc")])
ds.colnames('df_ext_income_l', datasources=c.data[c("dnbc")])
ds.dim('df_ext_income_l', datasources=c.data[c("dnbc")])

# eden

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6","ext_pc_.7","ext_pc_.8"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("eden")])
ds.colnames('df_ext_income_l', datasources=c.data[c("eden")])
ds.dim('df_ext_income_l', datasources=c.data[c("eden")])

# elfe

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.5","ext_pc_.6"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("elfe")])
ds.colnames('df_ext_income_l', datasources=c.data[c("elfe")])
ds.dim('df_ext_income_l', datasources=c.data[c("elfe")])

# INMA

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = c("ext_pc_.7","ext_pc_.8","ext_pc_.9", "ext_pc_.10", "ext_pc_.11", "ext_pc_.12"),
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("INMA")])
ds.colnames('df_ext_income_l', datasources=c.data[c("INMA")])
ds.dim('df_ext_income_l', datasources=c.data[c("INMA")])

# NINFEA

ds.reShape(
  data.name = "analysis_df_w_ext",
  timevar.name = "age_years",
  idvar.name = "child_id",
  varying = "ext_pc_.13",
  direction = "long", 
  newobj = "df_ext_income_l", 
  datasources=c.data[c("ninfea")])
ds.colnames('df_ext_income_l', datasources=c.data[c("ninfea")])
ds.dim('df_ext_income_l', datasources=c.data[c("ninfea")])

datashield.workspace_save(conns = c.data, ws ="income_interactions_ext")

# externalizing behavior and household monthly income prep

ds.asFactor('df_ext_income_l$centre_care', newobj.name='f.centre_care')
ds.asFactor('df_ext_income_l$flowincome', newobj.name='f.flowincome')
ds.asNumeric('df_ext_income_l$ext_age_', newobj='n.ext_age_')
ds.asNumeric('df_ext_income_l$ext_age_', newobj='n.ext_pc_')
ds.asNumeric('df_ext_income_l$age_years', newobj='n.age_years')
ds.asNumeric('df_ext_income_l$ext_pc_', newobj='n.ext_pc_')
ds.asNumeric('df_ext_income_l$agebirth_m_y', newobj='n.agebirth_m_y')
ds.asNumeric('df_ext_income_l$birth_weight', newobj='n.birth_weight')
ds.asNumeric('df_ext_income_l$child_id', newobj='n.child_id')
ds.asFactor('df_ext_income_l$only_child', newobj.name='f.only_child')
ds.asFactor('df_ext_income_l$sex', newobj.name='f.sex')
ds.asFactor('df_ext_income_l$edu_m_.0', newobj.name='f.edu_m_.0')
ds.asFactor('df_ext_income_l$fam_splitup.0', newobj.name='f.fam_splitup.0', datasources = c.data[c('alspac', 'generationR', 'dnbc', 'eden', 'elfe')])

# i have to dichotomize this mothers employment so that it can be used for alspac
ds.asNumeric("df_ext_income_l$femp_cat_mom_0", newobj = "mom.empl.dich")
ds.table('mom.empl.dich')
ds.Boole(V1="mom.empl.dich", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="mom.emp.dich")
ds.table('mom.emp.dich') 
ds.asFactor('mom.emp.dich', newobj.name='f.mom.emp.dich')
ds.asFactor('df_ext_income_l$femp_cat_mom_0', newobj.name='f.femp_cat_mom_0')
ds.asFactor('df_ext_income_l$f.cen_dur_cat', newobj.name='f.cen_dur_cat')

ds.dataFrame(x=c('df_ext_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.ext_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex','f.fam_splitup.0', 'n.ext_pc_'), newobj='ext_income', datasources = c.data[c('generationR', 'dnbc', 'eden', 'elfe')])
ds.dataFrame(x=c('df_ext_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.ext_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex', 'n.ext_pc_'), newobj='ext_income', datasources = c.data[c('INMA')])
ds.dataFrame(x=c('df_ext_income_l',"f.femp_cat_mom_0",  'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.ext_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex', 'n.ext_pc_'), newobj='ext_income', stringsAsFactors = FALSE, datasources = c.data[c('ninfea')])
ds.dataFrame(x=c('df_ext_income_l',"f.femp_cat_mom_0", "f.mom.emp.dich", 'f.only_child', 'f.centre_care','f.cen_dur_cat','f.flowincome','n.ext_age_','n.age_years', 'n.agebirth_m_y', 'n.birth_weight', 'n.child_id', 'f.only_child','f.edu_m_.0', 'f.sex','f.fam_splitup.0', 'n.ext_pc_'), newobj='ext_income', datasources = c.data[c('alspac')])

ds.colnames ('ext_income')

datashield.workspace_save(c.data, "external_income_prep")
