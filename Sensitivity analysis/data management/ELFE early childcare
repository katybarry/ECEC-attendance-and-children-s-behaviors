################################################################################
## Project: ECEC attendance and internalizing and externalizing behaviors in adolescence
## Script purpose: elfe data management
## Date: 01/13/2023
## Author: Katharine M Barry
## Email: katharine.barry@iplesp.upmc.fr
################################################################################  
# Project: Childcare attendance and children's internalizing and externalizing behavior
# Script purpose: ALSPAC cohort data management 
#Author: Katharine Barry 
# Email: Katharine.Barry@inserm.fr

#########################################
#########################################  

datashield.tables(conns)

############## assign tables #####################
####### outcomes data #######################
datashield.assign.table(
  conns =   conns,
  table = "project12-elfe/1_1_outcome_1_0/yearly_rep",
  symbol = "elfe_out")
####### repeated data #######################
datashield.assign.table(
  conns =   conns,
  table = "project12-elfe/2_1_core_1_0/yearly_rep" ,
  symbol = "elfe_core_rep")

####### non repeated data ########################
datashield.assign.table(
  conns =   conns,
  table = "project12-elfe/2_1_core_1_0/non_rep" ,
  symbol = "elfe_core_non_rep")

# check the columns in the non repeated data
ds.colnames("elfe_out", datasources = conns)
# check columns of non repeated data
ds.colnames("elfe_core_rep", datasources = conns)
# check the columns in the yearly repeated data
ds.colnames("elfe_core_non_rep", datasources = conns)

####place data into wide format

ds.reShape(
  data.name = "elfe_core_rep",
  timevar.name = "age_years",
  idvar.name = "child_id",
  v.names = c( "occup_m_",         "edu_f1_",          "edu_m_","childcareprof_" ,  "famsize_child", "famsize_adult",  
               "childcare_" ,      "hhincome_" ,       "fam_splitup" , "childcarerel_" , "childcarecentre_"
  ),
  direction = "wide",
  newobj = "elfe_core__wide",
  datasources = conns
)

ds.merge(
  x.name = "elfe_out",
  y.name = "elfe_core__wide",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "analysis_df_4_elfe",
  datasources = conns
)


# merge the dataset with the nonrepeated variables
ds.merge(
  x.name =  "analysis_df_4_elfe",
  y.name = "elfe_core_non_rep",
  by.x.names = "child_id",
  by.y.names = "child_id",
  newobj = "analysis_merge_elfe",
  datasources = conns
)

## ---- check the merged variables
ds.colnames("analysis_merge_elfe", datasources = conns)
### who evaluated outcomes
ds.table('analysis_merge_elfe$int_eval_', datasources=conns)
ds.table('analysis_merge_elfe$ext_eval_', datasources=conns)

datashield.workspace_save(conns = conns, ws = "katharine_barry_elfe")
###### childcare center variable will be coded into a dichotomise variable in which if a child
###### was enrolled in child care at year 0 up to year 3, they will be yes and if not, no ######

################chilcare center attendance ############################

ds.table('analysis_merge_elfe$childcarecentre_.0')
ds.table('analysis_merge_elfe$childcarecentre_.1')
ds.table('analysis_merge_elfe$childcarecentre_.2')


#childcare center years 0 years 1 years 2 and year 3 set to numeric value 
ds.asNumeric('analysis_merge_elfe$childcarecentre_.0', newobj='centre_0')
ds.asNumeric('analysis_merge_elfe$childcarecentre_.1', newobj='centre_1')
ds.asNumeric('analysis_merge_elfe$childcarecentre_.2', newobj='centre_2')

###must replace the NA as 100 for later merge


ds.replaceNA(x='centre_0', forNA =100, newobj="NAcentre_.0", datasources=conns)
ds.replaceNA(x='centre_1', forNA =100, newobj="NAcentre_.1", datasources=conns)
ds.replaceNA(x='centre_2', forNA =100, newobj="NAcentre_.2", datasources=conns)
##verify it worked properly: ds.table('NAcentre_.0')


###combine all the waves together in order to measure childcare attendance at one point in time
ds.make(toAssign='NAcentre_.0 + NAcentre_.1+ NAcentre_.2', newobj = 'cen_care')
ds.table ('cen_care', datasources=conns)# this variable shows us how many children attended childcare center in just one year, 
#two years, or three years

ds.recodeValues(var.name='cen_care', 
                values2replace.vector = 2,
                new.values.vector = 1, newobj='centre_care1')
ds.table('centre_care1',datasources=conns)
ds.recodeValues(var.name='centre_care1', 
                values2replace.vector = c(3,100,101,102),
                new.values.vector = c(1,0,1,1), newobj='centre_care1')
ds.table('centre_care1')
ds.recodeValues(var.name='centre_care1', 
                values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,NA), newobj='centre_care')

ds.table('centre_care')


ds.asNumeric('analysis_merge_elfe$childcarerel_.0', newobj='rel_0')
ds.asNumeric('analysis_merge_elfe$childcarerel_.1', newobj='rel_1')
ds.asNumeric('analysis_merge_elfe$childcarerel_.2', newobj='rel_2')

#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='rel_0', forNA =100, newobj="NArel_.0")
ds.replaceNA(x='rel_1', forNA =100, newobj="NArel_.1")
ds.replaceNA(x='rel_2', forNA =100, newobj="NArel_.2")

ds.make(toAssign='NArel_.0 + NArel_.1+ NArel_.2', newobj = 'relcare')
ds.table ('relcare', datasources=conns) 

ds.recodeValues(var.name='relcare', values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,9999), newobj='rel_care1')
ds.recodeValues(var.name='rel_care1', values2replace.vector = c(1,2,3,100,101,102),
                new.values.vector = c(1,1,1,0,1,1), newobj='rel_care')


ds.table('rel_care')


ds.asNumeric('analysis_merge_elfe$childcareprof_.0', newobj='prof_0')
ds.asNumeric('analysis_merge_elfe$childcareprof_.1', newobj='prof_1')
ds.asNumeric('analysis_merge_elfe$childcareprof_.2', newobj='prof_2')

#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='prof_0', forNA =100, newobj="NAprof_.0")
ds.replaceNA(x='prof_1', forNA =100, newobj="NAprof_.1")
ds.replaceNA(x='prof_2', forNA =100, newobj="NAprof_.2")

ds.make(toAssign='NAprof_.0 + NAprof_.1+ NAprof_.2', newobj = 'profcare')
ds.table ('profcare', datasources=conns) 
ds.recodeValues(var.name='profcare', values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,9999), newobj='prof_care1')
ds.recodeValues(var.name='prof_care1', values2replace.vector = c(1,2,3,100,101,102),
                new.values.vector = c(1,1,1,0,1,1), newobj='prof_care')

ds.table('prof_care')

ds.asNumeric('analysis_merge_elfe$childcare_.0', newobj='other_0')
ds.asNumeric('analysis_merge_elfe$childcare_.1', newobj='other_1')
ds.asNumeric('analysis_merge_elfe$childcare_.2', newobj='other_2')

#changing the NAs so that we do not lose individuals due to the merging of year 1 and year 2 variable:
ds.replaceNA(x='other_0', forNA =100, newobj="NAother_.0")
ds.replaceNA(x='other_1', forNA =100, newobj="NAother_.1")
ds.replaceNA(x='other_2', forNA =100, newobj="NAother_.2")

ds.make(toAssign='NAother_.0 + NAother_.1+ NAother_.2', newobj = 'othercare')
ds.table ('othercare', datasources=conns) 
ds.recodeValues(var.name='othercare', values2replace.vector = c(200,201,300),
                new.values.vector = c(0,1,9999), newobj='other_care1')
ds.recodeValues(var.name='other_care1', values2replace.vector = c(1,2,3,100,101,102),
                new.values.vector = c(1,1,1,0,1,1), newobj='other_care')

ds.table("other_care")

# ECEC care
ds.recodeValues(var.name='centre_care', 
                values2replace.vector = c(0,1),
                new.values.vector = c(1000,2000), missing=9999, newobj='centre_care_T')
ds.table('centre_care_T')
ds.table('rel_care')
ds.table('prof_care')
ds.table('other_care')

ds.make(toAssign='centre_care_T+rel_care+prof_care+other_care', newobj = 'types_care')

ds.table("types_care")

ds.recodeValues(var.name='types_care1', values2replace.vector = c(29998,39996),
                new.values.vector = c(2,1), newobj='types_care2')

ds.recodeValues(var.name='types_care1', values2replace.vector = c(2001,10000,1002,2002),
                new.values.vector = c(1,2,2,1), newobj='types_care2')

ds.recodeValues(var.name='types_care2', values2replace.vector = c(10001,1003,2003),
                new.values.vector = c(2,2,1), newobj='types_care3')

ds.recodeValues(var.name='types_care3', values2replace.vector = c(10002,10999,11999),
                new.values.vector = c(2,0,1), newobj='types_care4')

ds.recodeValues(var.name='types_care4', values2replace.vector = c(19998,11000,12000),
                new.values.vector = c(0,2,1), newobj='types_care5')

ds.recodeValues(var.name='types_care5', values2replace.vector = c(19999,11001,12001),
                new.values.vector = c(2,2,1), newobj='types_care6')

ds.recodeValues(var.name='types_care6', values2replace.vector = c(19999,11001,12001),
                new.values.vector = c(2,2,1), newobj='types_care7')

ds.recodeValues(var.name='types_care7', values2replace.vector = c(20000,20998,21998),
                new.values.vector = c(2,0,1), newobj='types_care8')

ds.recodeValues(var.name='types_care8', values2replace.vector = c(29997,20999,21999),
                new.values.vector = c(0,2,1), newobj='types_care9')

ds.recodeValues(var.name='types_care9', values2replace.vector = c(29998,39996,30997),
                new.values.vector = c(2,NA,0), newobj='type_care10')

ds.recodeValues(var.name='type_care10', values2replace.vector = c(2000,1001),
                new.values.vector = c(1,2), newobj='early_care')
ds.table('early_care')
# 0= no type of care 1= ECEC care 2= other care

ds.dataFrame(x=c('analysis_merge_elfe','early_care', 'centre_care'), stringsAsFactors=FALSE, newobj='df_1')


datashield.workspace_save(conns = conns, ws = "exposure_early")



## covariate variable creation
##########################################################
##########################################################


#sibling position dichotomized into only child variable
#re code only child versus other (note that 1 is equivalent to only child)
ds.asNumeric("df_1$sibling_pos", newobj = "num_sib")
ds.Boole(V1="num_sib", V2='1', Boolean.operator='==', numeric.output=TRUE, newobj="only_child")
ds.table('only_child') 
ds.table("df_1$sibling_pos")

###changing mothers age in days to mothers age in years:
ds.make(toAssign="df_1$agebirth_m_d/365", newobj="agebirth_m_y", datasources=conns)


##categorize mother occupation into employed, unemployed, and other (at year 0)
###################################################
ds.asNumeric("df_1$occup_m_.0", newobj='occ_num_m_0')
ds.table('occ_num_m_0')
ds.recodeValues(var.name='occ_num_m_0', values2replace.vector = c(1,2,3,4,5,6), new.values.vector = c(1,1,0,2,2,2),newobj="emp_cat_mom_0")
ds.table('emp_cat_mom_0') # 0=unemployed 1=employed 2=other
## convert to a factor variable
ds.asFactor('emp_cat_mom_0',newobj='femp_cat_mom_0')
ds.table('femp_cat_mom_0')

# convert ppd to factor
ds.asFactor('df_1$ppd', newobj.name='f.ppd')

# confirm child gestational weight in numeric
ds.asNumeric('df_1$ga_lmp', newobj='n.ga_lmp')


ds.dataFrame(x=c('df_1', "only_child", 'femp_cat_mom_0', "agebirth_m_y","n.ga_lmp", 'f.ppd'), newobj='final')

datashield.workspace_save(conns = conns, ws = "early_covariates")



